#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from textwrap import dedent

from resources.filereader import get_communities_data
from resources.formatter import Formatter


def create_config(srcdir, fmtclass, exclude=None, filters=None):
    """
    Generates a configuration using all files in srcdir
    (non-recursively) excluding communities from 'exclude'.

    The files are read in lexicographic order to produce deterministic
    results.
    """
    if not exclude:
        exclude = set()
    if not filters:
        filters = []

    formatter = fmtclass()
    for community, data in get_communities_data(srcdir, exclude):
        try:
            domains = data['domains']
            nameservers = data['nameservers']
        except (TypeError, KeyError):
            continue

        formatter.add_comment("\n%s\n" % community)

        servers = filter(lambda d: all(f(d) for f in filters), nameservers)
        servers = list(servers)

        if len(domains) == 0:
            formatter.add_comment("No valid domains found")
        elif len(servers) == 0:
            formatter.add_comment("No valid servers found")
        else:
            formatter.add_data(domains, servers)

    print(formatter.finalize())


class DnsmasqFormatter(Formatter):
    """Formatter for dnsmasq"""
    def add_data(self, domains, servers):
        for domain in domains:
            for server in servers:
                self.config.append("server=/%s/%s" % (domain, server))


class BindFormatter(Formatter):
    """Formatter for bind9 (>=9.8) using type static-stub"""
    def add_data(self, domains, servers):
        for domain in domains:
            self.config.append(dedent("""
                zone "%s" {
                    type static-stub;
                    server-addresses { %s; };
                };
            """ % (domain, "; ".join(servers))).lstrip())


class BindForwardFormatter(Formatter):
    """Formatter for bind9 using type forward"""
    def add_data(self, domains, servers):
        for domain in domains:
            self.config.append(dedent("""
                zone "%s" {
                    type forward;
                    forwarders { %s; };
                    forward only;
                };
            """ % (domain, "; ".join(servers))).lstrip())


class UnboundForwardFormatter(object):
    """Impersonate a Formatter for unbound using forward-zone"""
    def __init__(self):
        self.zones = {}
        self.community = None
        self.buffer = []
        self.add_header()

    def add_header(self):
        self.buffer.append('#\n# This file is automatically generated.\n#\n')

    def add_comment(self, community_string):
        # this function simply remembers the last community
        self.community = community_string.strip()

    def add_data(self, domains, servers):
        self.zones[self.community] = {'forward': {}, 'reverse': {}}
        for domain in domains:
            domain = str(domain)
            if domain.endswith('ip6.arpa') or domain.endswith('in-addr.arpa'):
                self.zones[self.community]['reverse'][domain] = servers
            else:
                self.zones[self.community]['forward'][domain] = servers

    def add_server_block(self):
        self.buffer.append('server:')
        self.buffer.append('\tlocal-zone: "10.in-addr.arpa" nodefault')
        for community, zone_type in self.zones.items():
            self.buffer.append('\n\t# %s' % community)
            for zone in zone_type['forward'].keys():
                self.buffer.append('\tdomain-insecure: "%s"' % zone)
            for zone in zone_type['reverse'].keys():
                self.buffer.append('\tlocal-zone: "%s" nodefault' % zone)

    def add_zone_blocks(self):
        for community, zone_type in self.zones.items():
            self.buffer.append('\n#\n# %s\n#\n' % community)
            for zone, servers in zone_type['forward'].items():
                self._add_zone(zone, servers)
            for zone, servers in zone_type['reverse'].items():
                self._add_zone(zone, servers)

    def _add_zone(self, zone, servers):
        self.buffer.append('forward-zone:')
        self.buffer.append('\tname: "%s"' % zone)
        for server in servers:
            self.buffer.append('\tforward-addr: %s' % server)

    def finalize(self):
        self.add_server_block()
        self.add_zone_blocks()
        return "\n".join(self.buffer)
