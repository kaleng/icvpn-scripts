#!/usr/bin/env python3

from optparse import OptionParser
from socket import AF_INET, AF_INET6, inet_pton, error as socket_error

import resources.dns

if __name__ == "__main__":
    def try_inet_pton(af, ip):
        try:
            inet_pton(af, ip)
            return True
        except socket_error:
            return False


    formatters = {
        "dnsmasq": resources.dns.DnsmasqFormatter,
        "bind": resources.dns.BindFormatter,
        "bind-forward": resources.dns.BindForwardFormatter,
        "unbound": resources.dns.UnboundForwardFormatter,
    }
    filters = {
        "v4": lambda value: try_inet_pton(AF_INET, value),
        "v6": lambda value: try_inet_pton(AF_INET6, value),
    }
    parser = OptionParser()
    parser.add_option("-f", "--format", dest="fmt",
                      help="""Create config in format FMT.
                              Possible values: %s. Default: dnsmasq""" %
                           ", ".join(formatters.keys()),
                      metavar="FMT",
                      choices=list(formatters.keys()),
                      default="dnsmasq")
    parser.add_option("-s", "--sourcedir", dest="src",
                      help="Use files in DIR as input files. Default: "
                           "../icvpn-meta/",
                      metavar="DIR",
                      default="../icvpn-meta/")
    parser.add_option("-x", "--exclude", dest="exclude", action="append",
                      help="Exclude COMMUNITY (may be repeated)",
                      metavar="COMMUNITY",
                      default=[])
    parser.add_option("--filter", dest="filter",
                      help="""Only include certain servers.
                              Possible choices: %s""" %
                           ", ".join(filters.keys()),
                      choices=list(filters.keys()))

    (options, args) = parser.parse_args()

    resources.dns.create_config(options.src,
                                formatters[options.fmt],
                                set(options.exclude),
                                [filters[options.filter]] if options.filter else [])
